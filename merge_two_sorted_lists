You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

- - - 

# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val = 0, _next = nil)
#         @val = val
#         @next = _next
#     end
# end
# @param {ListNode} list1
# @param {ListNode} list2
# @return {ListNode}
def merge_two_lists(list1, list2)

    if list1.nil? && list2.nil?
        return nil
    elsif list1.nil?
        return list2
    elsif list2.nil?
        return list1
    end

    if list1.val <= list2.val
        head_node = list1
        secondary_list_head = list2
    elsif list1.val > list2.val
        head_node = list2 # [1]
        secondary_list_head = list1 # [2]
    end

    current_node = head_node
    idx = 0

    while true do
        if current_node.next.nil?
            current_node.next = secondary_list_head
            break
        elsif secondary_list_head.val <= current_node.next.val
            node_to_insert = secondary_list_head
            secondary_list_head = node_to_insert.next
            node_to_insert.next = current_node.next
            current_node.next = node_to_insert
        end

        break if secondary_list_head == nil # || secondary_list_head.next == nil
        
        current_node = current_node.next
        idx = idx + 1
    end
    head_node
end

