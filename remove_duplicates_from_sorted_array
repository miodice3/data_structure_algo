https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/

26. Remove Duplicates from Sorted Array
Easy
Topics
Companies
Hint
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.
Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
nums is sorted in non-decreasing order.

- - - - - - - - - -
# below is a naive implementation. the description I found not too clear, what they're looking for is in place modification of
# nums array, they're using this in the custom judge.  As the array is pass-by-reference, they're using the in-place-modified array
# and the returned int from the method signature in the result, I did not catch that during my initial design.
#
# the impact of the pass-by-reference is the nums array needs to be updated, and not completely overwritten at any point. this allows
# the original object in memory to be updated, not pointed to a new object all together breaking the reference.
#
# Best Conceivable Runtime seems to be O(n). although this loops 2x and constants are dropped, there is likely a way to handle this
# with a single array iteration and simplify the logic.
#

# @param {Integer[]} nums
# @return {Integer}, Then return the number of unique elements in nums.
def remove_duplicates(nums)
    curr_num = nil
    mapped_ray = nums.map do | num |
      if curr_num.nil?
        curr_num = num
        curr_num
      elsif num == curr_num
        nil
      else
        curr_num = num
        curr_num
      end
    end
    mapped_ray = mapped_ray.compact

    i = 0
    while i < nums.length do
        nums[i] = mapped_ray[i]
        i += 1
    end
    mapped_ray.length
end


- - - - - 

refactored approach removing an array loop

# @param {Integer[]} nums
# @return {Integer}, Then return the number of unique elements in nums.
#
def remove_duplicates(nums)

    # due to non-descending order, we know the first element will remain unchanged.
    last_unique_index_location = 0
    unique_idx_value = nums.first

    # start scan from index 1
    scan_idx = 1

    
    # increment scan_idx to check over each item in the array.
    # maintain a value, and pointer to the last updated array index.
    #
    while scan_idx < nums.length do
        if nums[scan_idx] != unique_idx_value
            # 1. increment index to update forward
            # 2. set current unique_idx_value to new number
            # 3. update nums index with new value
            #
            last_unique_index_location += 1
            unique_idx_value = nums[scan_idx]
            nums[last_unique_index_location] = unique_idx_value
        end

        scan_idx += 1
    end

    # return last updated index location + 1 to offset starting
    #  at 0, instead of another array operation
    #
    last_unique_index_location + 1
end

