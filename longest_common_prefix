Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters.

- - - 

# @param {String[]} strs
# @return {String}
def longest_common_prefix(strs)
    return_str = ""
    matched_chars = 0
    prefix_hsh = {}

    # always at least 1 word in the array
    # each word will be 0-200 characters long
    # each word is only lowercase english letters
    #
    strs.each_with_index do | word, index |
        if index == 0
            word.split('').each_with_index do |letter, j|
                prefix_hsh[j] = letter
            end
            puts prefix_hsh
            return_str = word
        else
            puts "within else on strs index #{index}"
            word.split('').each_with_index do |letter, n|
                if prefix_hsh[n] == letter
                    matched_chars = matched_chars + 1
                    next
                end

                return_str = return_str[0..n-1]
                break
            end
        end
    end
    return matched_chars > 0 ? return_str : "" 
end

# OBJECTIVE
# array of strings.  find and return the largest common prefix, or start to word

# we ned to check each word one time, so we'll need to iterate over the array of words.
#
# for the first word, we should split each character into the prefix_hash, with index sequentially starting at 0, value as letter.
# set return_str as first word
#
# the following words should be broken up and checked against the hash for the max of keys the hash has, or the current words length.
# leverage last index that returned a letter match, and truncate the return_str to this many characters.

# return the return_str, if no match validate "" 
