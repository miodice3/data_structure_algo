Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters.

- - - 

# @param {String[]} strs
# @return {String}
def longest_common_prefix(strs)
    return_str = strs[0]
    # guard against single element array of strs
    return return_str if strs.length == 1

    matched_chars = 0
    prefix_hsh = {}

    strs.each_with_index do | word, index |
        if index == 0
            word.split('').each_with_index do |letter, j|
                prefix_hsh[j] = letter
            end
            puts prefix_hsh
        elsif word == ""
            return ""
        else
            # guard against word shorter than return_str
            if word.length < return_str.length
                return_str = return_str[0..word.length-1]
            # guard against return_str shorter than word
            elsif word.length > return_str.length
                word = word[0..return_str.length-1]
                puts "word has been truncated, this is new word: #{word}"
            end

            puts "word: #{word}, index: #{index}"
            word.split('').each_with_index do |letter, n|
                if prefix_hsh[n] == letter
                    matched_chars = matched_chars + 1
                    next
                elsif n == 0
                    matched_chars = 0
                    return ""
                end

                if return_str.length > 1
                    return_str = return_str[0..n-1]
                else
                    return_str = ""
                end
                break
            end
        end
    end
    return matched_chars > 0 ? return_str : "" 
end

